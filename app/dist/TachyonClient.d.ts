import { AnchorProvider, Program } from "@coral-xyz/anchor";
import { PublicKey } from "@solana/web3.js";
import { Tachyon as TachyonIDLType } from './idl';
export declare class TachyonClient {
    readonly provider: AnchorProvider;
    readonly program: Program<TachyonIDLType>;
    readonly lut: PublicKey;
    constructor(provider: AnchorProvider, programId: PublicKey);
    initialize(): Promise<string>;
    initExp(domainStart: number[], domainEnd: number[]): Promise<string>;
    initLn(domainStart: number[], domainEnd: number[]): Promise<string>;
    initLog10(domainStart: number[], domainEnd: number[]): Promise<string>;
    initSin(domainStart: number[], domainEnd: number[]): Promise<string>;
    initCos(domainStart: number[], domainEnd: number[]): Promise<string>;
    initNormPdf(domainStart: number[], domainEnd: number[]): Promise<string>;
    initNormCdf(domainStart: number[], domainEnd: number[]): Promise<string>;
    initErf(domainStart: number[], domainEnd: number[]): Promise<string>;
    private loadFunction;
    loadExp(): Promise<string>;
    loadLn(): Promise<string>;
    loadLog10(): Promise<string>;
    loadSin(): Promise<string>;
    loadCos(): Promise<string>;
    loadNormCdf(): Promise<string>;
    loadNormPdf(): Promise<string>;
    loadErf(): Promise<string>;
    private evaluateFunction;
    evalExp(x: number[]): Promise<string>;
    evalLn(x: number[]): Promise<string>;
    evalLog10(x: number[]): Promise<string>;
    evalSin(x: number[]): Promise<string>;
    evalCos(x: number[]): Promise<string>;
    evalNormPdf(x: number[]): Promise<string>;
    evalNormCdf(x: number[]): Promise<string>;
    evalErf(x: number[]): Promise<string>;
}
